// src/type-guards/isEnumValue.ts
function isEnumValue(key, enumObject) {
  return Object.values(enumObject).includes(key);
}

// src/type-guards/isInArray.ts
var isInArray = (value, array) => array.includes(value);

// src/type-guards/isOfType.ts
function isOfType(value, property) {
  return value?.[property] !== void 0;
}

// src/utils/asyncEvery.ts
var asyncEvery = async (arr, predicate) => {
  for (let i = 0; i < arr.length; i++) {
    if (!await predicate(arr[i], i, arr)) {
      return false;
    }
  }
  return true;
};

// src/utils/asyncSome.ts
var asyncSome = async (arr, predicate) => {
  for (let i = 0; i < arr.length; i++) {
    if (await predicate(arr[i], i, arr)) {
      return true;
    }
  }
  return false;
};

// src/utils/isUndefined.ts
var isUndefined = (value) => value === void 0;

// src/utils/objectIsEqual.ts
var objectIsEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b);

// src/utils/partitionArray.ts
var partitionArray = (array, predicate) => {
  return (array ?? []).reduce(
    (acc, value) => {
      acc[predicate(value) ? 0 : 1].push(value);
      return acc;
    },
    [[], []]
  );
};

// src/utils/removePropertiesWith.ts
var removePropertiesWith = (object, predicate) => {
  return Object.entries(object).reduce((acc, [key, value]) => {
    if (!predicate(value)) {
      acc[key] = value;
    }
    return acc;
  }, {});
};

// src/utils/toArray.ts
var toArray = (itemOrItems, separator) => {
  if (itemOrItems === null || itemOrItems === void 0) {
    return [];
  }
  if (separator && typeof itemOrItems === "string") {
    return itemOrItems.split(separator);
  }
  return Array.isArray(itemOrItems) ? itemOrItems : [itemOrItems];
};
export {
  asyncEvery,
  asyncSome,
  isEnumValue,
  isInArray,
  isOfType,
  isUndefined,
  objectIsEqual,
  partitionArray,
  removePropertiesWith,
  toArray
};
